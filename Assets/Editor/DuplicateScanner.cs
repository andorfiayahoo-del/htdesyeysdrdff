// Auto-generated by Assistant v4
#if UNITY_EDITOR
using UnityEditor;
using UnityEngine;
using System.IO;
using System.Linq;
using System.Collections.Generic;
using System.Security.Cryptography;

public static class DuplicateScanner
{
    [MenuItem("Tools/Project/Scan Duplicates")]
    public static void Scan()
    {
        string assetsPath = Application.dataPath;
        var fileHashes = new Dictionary<string, List<string>>();
        int count = 0;
        foreach (var path in Directory.GetFiles(assetsPath, "*.*", SearchOption.AllDirectories))
        {
            if (path.EndsWith(".meta")) continue;
            if (path.Contains("/Library/") || path.Contains("\\Library\\")) continue;
            var ext = Path.GetExtension(path).ToLowerInvariant();
            // keep it light: check code, prefabs, textures, audio
            string[] whitelisted = {".cs",".shader",".prefab",".mat",".asset",".anim",".controller",".png",".jpg",".jpeg",".tga",".psd",".wav",".ogg",".mp3",".ttf",".otf",".fbx",".json"};
            if (!whitelisted.Contains(ext)) continue;

            try
            {
                using var sha = SHA256.Create();
                using var fs = File.OpenRead(path);
                var hash = System.Convert.ToBase64String(sha.ComputeHash(fs));
                string key = hash + " :: " + Path.GetFileName(path);
                if (!fileHashes.TryGetValue(key, out var list))
                    fileHashes[key] = list = new List<string>();
                list.Add(path);
                count++;
            }
            catch {}
        }

        int dupSets = 0;
        foreach (var kv in fileHashes)
        {
            if (kv.Value.Count > 1)
            {
                dupSets++;
                Debug.LogWarning($"[Duplicates] {kv.Value.Count} copies of {Path.GetFileName(kv.Value[0])}:\n - " + string.Join("\n - ", kv.Value));
            }
        }
        Debug.Log($"[Duplicates] Scan complete. Files scanned={count}. Duplicate sets={dupSets}.");
    }
}
#endif
